{"name":"The Rollbar alert lamp","tagline":"A 3D printed lamp that changes its behavior upon receiving a rollbar alert","body":"### General Description of the lamp\r\n\r\nThis 3D printed desktop lamp is enabled by a [Particle Photon](https://www.particle.io/). The Photon is a prototyping tool that comes with a Wi-Fi chipset. This enables interfacing sensors/actuators to the internet and monitor them remotely. This lamp is equipped with a 24 Pixel circular RGB LED strip called the [Neopixel from Adafruit Industries ](https://www.adafruit.com/product/1586). \r\n\r\nThe Particle Photon can produce different color combinations on the RGB LED strip as shown in the picture below:  \r\n  \r\n\r\n![](https://raw.githubusercontent.com/sai-y/photon_desktop_lamp/master/desktop_lamp.jpg) \r\n\r\n## Building the lamp\r\n\r\nThe following are needed to build the lamp:  \r\n  \r\n1. [Particle Photon](https://store.particle.io/)  \r\n2. 3D printed enclosure + lamp shade  \r\n3. Micro USB cable  \r\n4. [24 pixel Neopixel ring](https://www.adafruit.com/products/2268). \r\n  \r\n## Particle Photon - Firmware + Setup\r\n\r\nThe Particle Photon has to be setup to receive rollbar alerts. This includes adding the [WiFi credentials](https://docs.particle.io/guide/getting-started/start/photon/) to the Photon. \r\nThe firmware files for Particle Photon is available from [here](https://github.com/sai-y/photon_desktop_lamp/tree/master/firmware). This [tutorial](https://docs.particle.io/guide/getting-started/build/photon/) explains compiling the code and flashing it on the Photon.  \r\n  \r\nThe firmware consists of two major components:   \r\n\r\n1. Controlling the neopixel  \r\n2. Receiving incoming alerts from the web.  \r\n  \r\n### Controlling the neopixel:\r\nThere are libraries from Adafruit to control the neopixel using the Particle Photon. This firmware used to build this lamp was based on one of the examples available with the library.  \r\n  \r\n### Receiving incoming alerts from the web:  \r\nThe Particle Photon enables registering a function that could be executed when a rollbar alert is received. For e.g.: A function called `triggerAlert`can be registered as follows:  \r\n  \r\n`    bool success = Particle.function(\"trigger\", triggerAlert);`  \r\n  \r\nThe string `trigger` is used to make a POST request to the Particle API. When a request is received, the particle API triggers the function `triggerAlert`. This sets a flag `triggerReceived`.  \r\n  \r\n```\r\nint triggerAlert(String command){\r\n    if(command == \"triggered\"){\r\n        if(true){\r\n            triggerReceived = true;\r\n            return 1;\r\n        }\r\n    }\r\n    return -1;\r\n}  \r\n```\r\n\r\nThe main thread on the Particle Photon keeps checking for this flag and changes its behavior accordingly:\r\n\r\n```\r\nif(triggerReceived){\r\n\tfor(int i=0;i<25;i++){\r\n\t\tcolorWipe(strip.Color(255, 0, 0), 50); // Red\r\n\t\tcolorWipe(strip.Color(0, 0, 0), 50); // Off\r\n\t}\r\n\ttriggerReceived = false;\r\n}else{\r\n\tfor(int i=0;i<2;i++){\r\n\t\tcolorWipe(strip.Color(255, 255, 255), 50); // White\r\n\t\tcolorWipe(strip.Color(0, 0, 0), 50); // Off\r\n\t}\r\n}\r\n```\r\n\r\nIn order to trigger the Particle Photon for an alert, the device id and an access token is necessary. This information is available at [particle.io](https://docs.particle.io/guide/getting-started/intro/photon/)\r\n\r\n![](http://i.imgur.com/fc4jrqk.jpg) ![](http://i.imgur.com/xgCMGtR.jpg)\r\n  \r\nA trigger could be sent to the Particle Photon in the following format:  \r\n```\r\nhttps://api.particle.io/v1/devices/{DEVICE_ID}/trigger\r\n\r\n```\r\nThe body of the request should contain the arguments to the `trigger` function and the `access_token`:\r\n  \r\n```\r\nargs=triggered&access_token=44614d95201bbf22a0c421acc10f85ed5ba11186\r\n  \r\n```\r\n## Setting up Rollbar webhooks\r\n\r\nThe alert could be sent to a Particle Photon using Rollbar's webhook notification option. \r\n![](http://i.imgur.com/fMsafqZ.jpg)\r\n  \r\nWhen there are no rollbar alerts, the lamp glows white:  \r\n\r\n![](http://i.imgur.com/2F0I7H2.gif)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}